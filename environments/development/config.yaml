# Terragrunt AWS EKS Configuration
# This configuration uses a single Network Load Balancer (NLB) for both protocols:
# - NLB handles HTTP web UI on port 80 → NodePort 30080 
# - NLB handles RTMP push traffic on port 1935 → NodePort 31935
#
# For Oryx (Enhanced SRS - Simple Realtime Server):
# - Single NLB handles both HTTP-FLV web UI and RTMP push traffic
# - Unified load balancer configuration for complete Oryx functionality

general:
  project: "terragrunt-aws"
  env-short: "dev"
  regions:
    - ap-southeast-1

# No IAM roles for initial deployment - will add access entries manually
default-aws-auth-extra-roles: &default-aws-auth-extra-roles []

# IAM user access entries for cluster access
default-access-entries: &default-access-entries
  - principal-arn: "arn:aws:iam::145065858520:user/dell-admin"
    policy-associations:
      - policy-arn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
        access-scope: "cluster"

default-exposed-ports: &default-exposed-ports
  oryx-http-nodeport:
    number: 30080
    protocol: tcp
    cidr-filters:
      - 0.0.0.0/0  # Allow HTTP access from anywhere for ALB
  oryx-rtmp-nodeport:
    number: 31935
    protocol: tcp
    cidr-filters:
      - 0.0.0.0/0  # Allow RTMP access from anywhere for external streaming clients

default-eks-public-access-cidrs: &default-eks-public-access-cidrs
  basti0n: 127.0.0.0/32

default-helm-charts: &default-helm-charts
  oryx:
    repository: oci://ghcr.io/dungxtd/helm
    chart: oryx
    version: 1.0.7
    namespace: oryx
    valuesYAMLTemplate:
      # Oryx configuration - Enhanced SRS with additional features
      candidate: "auto"
      # Use default /data persistence path for Oryx
      persistence:
        enabled: true
        path: "/data"
      conf:
        SRS_LOG_TANK: "console"
        SRS_HTTP_SERVER_ENABLED: "on"
        SRS_HTTP_API_ENABLED: "on"
        SRS_VHOST_HTTP_REMUX_ENABLED: "on"
        SRS_VHOST_HLS_ENABLED: "on"
        SRS_SRT_SERVER_ENABLED: "on"
        SRS_VHOST_SRT_ENABLED: "on"
        SRS_VHOST_SRT_TO_RTMP: "on"
        SRS_RTC_SERVER_ENABLED: "on"
        SRS_RTC_SERVER_CANDIDATE: "*"
        SRS_VHOST_RTC_ENABLED: "on"
        SRS_VHOST_RTC_RTMP_TO_RTC: "on"
        SRS_VHOST_RTC_RTC_TO_RTMP: "on"
        # Enhanced Oryx features
        SRS_VHOST_HTTP_HOOKS_ENABLED: "on"
        SRS_VHOST_DVR_ENABLED: "on"
      # Service configuration - use NodePort to work with ALB/NLB infrastructure
      service:
        type: NodePort     # Use NodePort to work with our ALB/NLB infrastructure
        rtmp: 
          port: 31935      # Service port for RTMP
          nodePort: 31935  # Explicit NodePort for NLB targeting
        http: 
          port: 30080      # Service port for HTTP
          nodePort: 30080  # Explicit NodePort for ALB targeting
        https: 
          port: 30443      # Service port for HTTPS
          nodePort: 30443  # Explicit NodePort
        srt: 
          port: 32080      # Service port for SRT
          nodePort: 32080  # Explicit NodePort
        rtc: 
          port: 32000      # Service port for WebRTC
          nodePort: 32000  # Explicit NodePort

default-eks-addons: &default-eks-addons
  coredns:
    addon-version: v1.12.2-eksbuild.4
    resolve-conflicts: "OVERWRITE"

default-ecs-service: &default-ecs-service
  launch-type: FARGATE
  platform-version: "1.4.0"
  desired-count: 1
  assign-public-ip: true
  deployment-controller: ECS
  min-healthy-percent: 50
  max-percent: 200
  capacity-provider-strategy:
    - capacity-provider: FARGATE
      weight: 1

default-ecs-task-base: &default-ecs-task-base
  requires-compatibilities:
    - FARGATE
  network-mode: awsvpc
  execution-role-policy-arns:
    - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  task-role-policy-arns: []

default-ecs-security-ingress: &default-ecs-security-ingress
  - description: Allow HTTP
    from-port: 8080
    to-port: 8080
    protocol: tcp
    cidr-blocks:
      - 0.0.0.0/0

default-ecs-load-balancer-default-action: &default-ecs-load-balancer-default-action
  type: fixed-response
  fixed-response:
    status-code: "404"
    content-type: "text/plain"
    message-body: "not found"

comment-task: &comment-task
  <<: *default-ecs-task-base
  family: "comment"
  cpu: 512
  memory: 1024
  containers:
    comment:
      image: "public.ecr.aws/nginx/nginx:stable"
      cpu: 512
      memory: 1024
      essential: true
      environment: {}
      port-mappings:
        - container-port: 8080
          protocol: tcp
      log-configuration:
        log-driver: awslogs
        options:
          awslogs-group: "/ecs/comment"
          awslogs-region: ap-southeast-1
          awslogs-stream-prefix: comment

stream-task: &stream-task
  <<: *default-ecs-task-base
  family: "stream"
  cpu: 1024
  memory: 2048
  containers:
    stream:
      image: "ghcr.io/dungxtd/oryx:1.0.7"
      cpu: 1024
      memory: 2048
      essential: true
      environment:
        SRS_LOG_TANK: console
      port-mappings:
        - container-port: 8080
          protocol: tcp
      log-configuration:
        log-driver: awslogs
        options:
          awslogs-group: "/ecs/stream"
          awslogs-region: ap-southeast-1
          awslogs-stream-prefix: stream

comment-service: &comment-service
  <<: *default-ecs-service
  name: "comment"
  assign-public-ip: false

stream-service: &stream-service
  <<: *default-ecs-service
  name: "stream"
  assign-public-ip: false

comment-definition: &comment-definition
  service: *comment-service
  task: *comment-task
  log-group:
    name: "/ecs/comment"
    retention-in-days: 30
  network:
    vpc: terragrunt-aws
    subnets:
      - name: default
        kind: private
      - name: default
        kind: public
  security-group:
    name: "comment-fargate-sg"
    description: "Ingress for comment ECS service"
    ingress: *default-ecs-security-ingress
  load-balancer-config:
    shared:
      load-balancer: public-alb
      listener: http
      rules:
        - priority: 10
          conditions:
            path-patterns:
              - /comment*
    listeners:
      http:
        listener-port: 80
        listener-protocol: HTTP
        target-port: 8080
        target-protocol: HTTP
        container-name: comment
        container-port: 8080
        health-check:
          protocol: HTTP
          port: 8080
          path: /

stream-definition: &stream-definition
  service: *stream-service
  task: *stream-task
  log-group:
    name: "/ecs/stream"
    retention-in-days: 30
  network:
    vpc: terragrunt-aws
    subnets:
      - name: default
        kind: private
      - name: default
        kind: public
  security-group:
    name: "stream-fargate-sg"
    description: "Ingress for stream ECS service"
    ingress: *default-ecs-security-ingress
  load-balancer-config:
    shared:
      load-balancer: public-alb
      listener: http
      rules:
        - priority: 20
          conditions:
            path-patterns:
              - /stream*
    listeners:
      http:
        listener-port: 80
        listener-protocol: HTTP
        target-port: 8080
        target-protocol: HTTP
        container-name: stream
        container-port: 8080
        health-check:
          protocol: HTTP
          port: 8080
          path: /

default-ecs-services: &default-ecs-services
  comment: *comment-definition
  stream: *stream-definition

alb-dns-aliases: &default-alb-dns-aliases
  - api
  - auth-api
  - oryx-web  # For Oryx HTTP-FLV web UI

eks:
  enabled: false
  cluster-module-source: cloudposse/eks-cluster/aws
  cluster-module-version: 4.6.0
  node-group-module-source: cloudposse/eks-node-group/aws
  node-group-module-version: 3.3.0
  regions:
    ap-southeast-1:
      cluster-name-0:
        alb-dns-aliases: *default-alb-dns-aliases
        aws-auth-extra-roles: *default-aws-auth-extra-roles
        access-entries: *default-access-entries
        k8s-version: 1.33
        endpoint-public-access: true
        public-access-cidrs:
          all: 0.0.0.0/0
        # Single deployment type: NLB for both HTTP (port 80) and RTMP (port 1935)
        deployment-types:
          - nlb   # Single NLB handles both HTTP UI and RTMP traffic
        
        # DNS and certificate configuration
        use-route53: false          # Set to true to enable Route53 DNS and SSL certificates
        alb-http-only: true         # Use HTTP-only (no SSL) - works with load balancer DNS

        # Load Balancer configuration for unified NLB
        load-balancer-config:
          nlb:
            # Multiple listeners on the same NLB
            listeners:
              http:
                # HTTP UI traffic: port 80 → NodePort 30080
                target-port: 30080        # NodePort for HTTP service
                target-protocol: "TCP"    # NLB uses TCP even for HTTP
                listener-port: 80         # NLB listens on port 80
                listener-protocol: "TCP"
                health-check:
                  port: 30080
                  protocol: "TCP"
                  path: "/"               # Health check path for HTTP
              rtmp:
                # RTMP streaming traffic: port 1935 → NodePort 31935
                target-port: 31935        # NodePort for RTMP service
                target-protocol: "TCP"
                listener-port: 1935       # NLB listens on port 1935
                listener-protocol: "TCP"
                health-check:
                  port: 31935
                  protocol: "TCP"
        network:
          vpc: terragrunt-aws
          subnets:
            - name: default
              kind: private
            - name: default
              kind: public  # Need public subnets for load balancers
        addons:
          <<: *default-eks-addons
        helm-charts:
          <<: *default-helm-charts
        # FIXME: missing ec2 names while using managed node groups
        # https://github.com/terraform-aws-modules/terraform-aws-eks/issues/2032
        # potential fix: use our own launch templates
        node-groups:
          workers:
            network:
              subnet:
                name: default
                kind: private
              # Removing availability-zones to use simple private_subnet_ids path
              # availability-zones:
              #   - a
            desired-size: 2
            min-size: 1
            max-size: 10
            ami-type: AL2023_x86_64_STANDARD
            instance-types:
              - t3.small
            autoscaler-enabled: false
            exposed-ports:
              <<: *default-exposed-ports
ecs:
  regions:
    ap-southeast-1:
      stream-services:
        name: "stream-services"
        capacity-providers:
          - FARGATE
        load-balancers:
          public-alb:
            type: alb
            scheme: internet-facing
            enable-http2: true
            vpc: terragrunt-aws
            security-group:
              name: "stream-services-shared-alb-sg"
              description: "Ingress for shared ALB"
              ingress:
                - description: Allow HTTP
                  from-port: 80
                  to-port: 80
                  protocol: tcp
                  cidr-blocks:
                    - 0.0.0.0/0
            subnets:
              - name: default
                kind: public
            listeners:
              http:
                listener-port: 80
                listener-protocol: HTTP
                default-action: *default-ecs-load-balancer-default-action
        services: *default-ecs-services
network:
  default_region: "ap-southeast-1"
  # NOTE: vpc names will be prefixed with env_short
  default_vpc: "terragrunt-aws"
  # Route53 disabled - using load balancer DNS only
  vpc:
    vpc-module-source: "cloudposse/vpc/aws"
    vpc-module-version: "2.1.1"
    subnet-module-source: "cloudposse/dynamic-subnets/aws"
    subnet-module-version: "2.4.2"
    regions:
      ap-southeast-1:
        terragrunt-aws:
          ipv4-cidr: 172.1.0.0/16
          subnets:
            default:
              ipv4-cidr: 172.1.0.0/18
              private_subnets_enabled: true
              public_subnets_enabled: true
              igw: true
              ngw: true
              availability-zones:
              - ap-southeast-1a
              - ap-southeast-1b
              - ap-southeast-1c
